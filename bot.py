import json
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command

API_TOKEN = "7669768570:AAGoEM5v22-UXc9LdcVHpxX57V6qRIu5K6o"
ADMIN_IDS = {1483826275, 5796861712}  # –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
BALANCE_FILE = "balances.json"

def load_balances():
    try:
        with open(BALANCE_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_balances(balances):
    with open(BALANCE_FILE, "w") as f:
        json.dump(balances, f, indent=4)

balances = load_balances()

@dp.message(Command("profile"))
async def profile(message: Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or "–ë–µ–∑ –Ω—ñ–∫–∞"
    balance = balances.get(user_id, 0)
    await message.reply(f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å: @{username}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance} –±–∞–ª—ñ–≤")

@dp.message(Command("uspr"))
async def uspr(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    if not message.reply_to_message or message.reply_to_message.from_user.is_bot:
        await message.reply("‚ùå –¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    user_id = str(message.reply_to_message.from_user.id)
    username = message.reply_to_message.from_user.username or "–ë–µ–∑ –Ω—ñ–∫–∞"
    balance = balances.get(user_id, 0)
    await message.reply(f"üë§ @{username}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance} –±–∞–ª—ñ–≤")

@dp.message(Command("plmi"))
async def plmi(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    if not message.reply_to_message or message.reply_to_message.from_user.is_bot:
        await message.reply("‚ùå –¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    try:
        amount = int(message.text.split()[1].replace("+", ""))  # –í–∏–¥–∞–ª—è—î–º–æ '+' –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É
    except (IndexError, ValueError):
        await message.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /plmi +10 –∞–±–æ /plmi -5)")
        return
    user_id = str(message.reply_to_message.from_user.id)
    balances[user_id] = balances.get(user_id, 0) + amount
    save_balances(balances)
    await message.reply(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ! –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {balances[user_id]} –±–∞–ª—ñ–≤")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
