import json
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command

API_TOKEN = "7669768570:AAGoEM5v22-UXc9LdcVHpxX57V6qRIu5K6o"
ADMIN_IDS = {1483826275, 5796861712, 308090114}  # –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
BALANCE_FILE = "balances.json"

def load_balances():
    try:
        with open(BALANCE_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_balances(balances):
    with open(BALANCE_FILE, "w") as f:
        json.dump(balances, f, indent=4)

balances = load_balances()

@dp.message(Command("profile"))
async def profile(message: Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or "–ë–µ–∑ –Ω—ñ–∫–∞"
    balance = balances.get(user_id, 0)
    await message.reply(f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å: @{username}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance} –±–∞–ª—ñ–≤")

@dp.message(Command("uspr"))
async def uspr(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    if not message.reply_to_message or message.reply_to_message.from_user.is_bot:
        await message.reply("‚ùå –¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    user_id = str(message.reply_to_message.from_user.id)
    username = message.reply_to_message.from_user.username or "–ë–µ–∑ –Ω—ñ–∫–∞"
    balance = balances.get(user_id, 0)
    await message.reply(f"üë§ @{username}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance} –±–∞–ª—ñ–≤")

@dp.message(Command("plmi"))
async def plmi(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    if not message.reply_to_message or message.reply_to_message.from_user.is_bot:
        await message.reply("‚ùå –¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    try:
        amount = int(message.text.split()[1].replace("+", ""))  # –í–∏–¥–∞–ª—è—î–º–æ '+' –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É
    except (IndexError, ValueError):
        await message.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /plmi +10 –∞–±–æ /plmi -5)")
        return
    user_id = str(message.reply_to_message.from_user.id)
    balances[user_id] = balances.get(user_id, 0) + amount
    save_balances(balances)
    await message.reply(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ! –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {balances[user_id]} –±–∞–ª—ñ–≤")

@dp.message(Command("top"))
async def top(message: Message):
    if not balances:
        await message.reply("üòï –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ –Ω–µ–Ω—É–ª—å–æ–≤–∏–º –±–∞–ª–∞–Ω—Å–æ–º.")
        return

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–ª–∞–Ω—Å–æ–º > 0 —ñ —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ –±–∞–ª–∞–º–∏
    top_users = sorted(
        ((uid, bal) for uid, bal in balances.items() if bal > 0),
        key=lambda x: x[1],
        reverse=True
    )

    top_text = "üèÜ –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n"
    for i, (user_id, balance) in enumerate(top_users[:10], start=1):  # –¢–æ–ø-10
        try:
            user = await bot.get_chat(int(user_id))
            username = f"@{user.username}" if user.username else f"ID: {user_id}"
        except Exception:
            username = f"ID: {user_id}"  # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º'—è

        top_text += f"{i}. {username} ‚Äî {balance} –±–∞–ª—ñ–≤\n"

    await message.reply(top_text)


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
